{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Def",
      "Caption": "Define variables etc. ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(Configuration) == \"RCI\") {",
          "    #[$(cfgname = 'Release')]",
          "    $(isPubRel = true)",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "    $(isPubRel = false)",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "$(odir = \"$(dbin)raw\")",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(RootObjDir)\", true)]",
          "",
          "Bug https://github.com/3F/vsSolutionBuildEvent/issues/71",
          "$(OutDirFnv = \"$(OutDir:Huid)..\\$(cfgname)\")",
          "",
          "### rev base",
          "",
          "$(revDeltaBase  = \"2021/07/28\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534)",
          "",
          "#[var +revBuild]",
          "#[var +bSha1]",
          "",
          "################ Versions",
          "",
          "#[var _versions = #[File get(\"..\\.version\")]]",
          "",
          "#[$(loop = true)]",
          "#[Box iterate(i = 0; $(loop); i += 1): #[try",
          "{    ",
          "    #[var lver = #[$(_versions.Split(\"\\r\"\"\\n\")[$(i)].Trim())]]",
          "    #[try ",
          "    {",
          "        #[( $(lver) != \"\" ) ",
          "        {            ",
          "            #[var vprj  = #[$(lver.Split(':', 2)[0])]]",
          "            ",
          "            #[var v_#[$(vprj)] = #[$(lver.Split(':', 2)[1])]]",
          "        }]",
          "    }",
          "    catch(err, msg){ #[IO writeLine(STDERR): .version processing failed: #[$(msg)] ] }]",
          "}",
          "catch { $(loop = false) }] ]",
          "",
          "",
          "E.g.:",
          "  $(v_algorithm)",
          "  $(v_dotnet)"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPkg",
      "Caption": "Submodules and dep packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( !(#[IO exists.file(\"Fnv1a128/.gitignore\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init Fnv1a128\", 1000)]",
          "}]",
          "",
          "#[( !(#[IO exists.file(\"LX4Cnh/.gitignore\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init LX4Cnh\", 1000)]",
          "}]",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"$(MSBuildBinPath)\\MSBuild.exe\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration)\", 1000)]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVer",
      "Caption": "Update versions ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(isPubRel)) ",
          "{",
          "    #[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "    #[var revBuild  = #[$(",
          "        [System.TimeSpan]::FromTicks('$(",
          "            [MSBuild]::Subtract($(tNow), $(tBase))",
          "        )')",
          "        .TotalMinutes.ToString('0')",
          "    )]]",
          "                         ",
          "    #[var revBuild  = #[$(",
          "    ",
          "     [MSBuild]::Add(",
          "         $(revDeltaMin), ",
          "         $([MSBuild]::Modulo(",
          "             $(revBuild), ",
          "             $([MSBuild]::Subtract(",
          "                 $(revDeltaMax), $(revDeltaMin)",
          "              ))",
          "          ))",
          "      )",
          "      ",
          "    )]]",
          "    ",
          "    #[$(pVerBuild = \"$(v_dotnet).$(revBuild)\")]",
          "    #[$(pVerBuild0 = $(pVerBuild))]",
          "}",
          "else",
          "{",
          "    #[$(revBuild = 0)]",
          "    #[$(pVerBuild = \"$(v_dotnet)\")]",
          "    #[$(pVerBuild0 = \"$(pVerBuild).0\")]",
          "}]",
          "",
          "",
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "using System;",
          "",
          "namespace net.r_eg.hashing",
          "{",
          "    public static class HuidVersion",
          "    {",
          "        public const string PRODUCT = \"%PROD%\";",
          "",
          "        public const string NUMBER = \"%NUM%\";",
          "",
          "        public const string B_SHA1 = \"%B_SHA1%\";",
          "",
          "        public static readonly Version number = new(NUMBER);",
          "    }",
          "}]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[($(isPubRel) ) { #[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]] }else{ #[var -isGit] }]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[$(printVersion = \"$(pVerBuild)+$(bSha1)\")]",
          "    #[$(buildCfg = $(Configuration))]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')]",
          "    #[$(buildCfg = '')]",
          "    #[$(printVersion = \"$(pVerBuild)\")]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%NUM%\", \"$(pVerBuild)\")",
          "                   .Replace(\"%PROD%\", \"$(printVersion)\")",
          "                   .Replace(\"%B_SHA1%\", \"$(bSha1)\") )]]",
          "",
          "",
          "#[File write(\"csharp/HuidVersion.cs\"):#[$(tpl.Replace('\\n', '\\r\\n'))]]",
          "",
          "#[IO replace.Regex(\"csharp/Huid.csproj\", \"<Version>.+?</Version>\", \"<Version>$(v_dotnet)</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    Huid #[$(printVersion)]",
          "    ",
          "    ",
          "    Configuration:  #[$(Configuration)]",
          "    ",
          "    Platforms:      #[$(TargetFrameworks)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( $(isPubRel) ) { ",
          "    #[IO replace.Regex(\"csharp/Huid.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo.Replace('\\n', '\\r\\n'))</BuildInfoVSSBE>\")]",
          "}else{",
          "    #[IO replace.Regex(\"csharp/Huid.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]",
          "}]",
          "",
          "#[IO writeLine(\"$(RootObjDir)/build-info.txt\"):#[$(buildInfo.Replace('\\n', '\\r\\n'))]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActDist",
      "Caption": "Packages etc.",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( $(cfgname) == \"Release\" )",
          "{",
          "    #[IO copy.file(",
          "        {\"..\\License.txt\", \"..\\3rd-party-notices.txt\", \"..\\Readme.md\", \"..\\changelog.txt\", \"..\\.version\", \"$(RootObjDir)/build-info.txt\"}, ",
          "        \"$(odir)/\", true",
          "    )]",
          "    ",
          "    #[$(_targets = $(TargetFrameworks:Huid))]",
          "    #[$(_loop = true)]",
          "    ",
          "    #[Box iterate(i = 0; $(_loop); i += 1): ",
          "      #[try",
          "      {",
          "        ",
          "        #[$(_target = $(_targets.Split(\";\")[$(i)]))]",
          "        ",
          "        #[IO copy.file",
          "        (",
          "            \"$(OutDirFnv)/$(_target)/*.*\", ",
          "            \"$(odir)/lib/$(_target)/\", ",
          "            true,",
          "            {\"*.json\"}",
          "        )]",
          "      }",
          "      catch { $(_loop = false) }]",
          "    ]",
          "    ",
          "    #[IO copy.directory(\"\", \"$(odir)/tools/\", true)]",
          "    #[IO copy.file({ \".tools\\gnt.bat\" }, \"$(odir)/tools/\", true)]",
          "    ",
          "    #[7z pack.directory(\"$(odir)\", \"$(dbin)Huid.$(printVersion).zip\")]",
          "    ",
          "    ",
          "    #[IO copy.file",
          "    (",
          "        \"$(OutDirFnv)/*$(v_dotnet).nupkg\",",
          "        \"$(dbin)/Huid.$(v_dotnet).nupkg\", ",
          "        true ",
          "    )]",
          "}]"
        ]
      }
    }
  ]
}